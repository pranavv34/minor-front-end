{"ast":null,"code":"'use strict';\n\nimport AxiosError from '../core/AxiosError.js';\nimport parseProtocol from './parseProtocol.js';\nimport platform from '../platform/index.js';\nconst DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\\s\\S]*)$/;\n/**\n * Parse data uri to a Buffer or Blob\n *\n * @param {String} uri\n * @param {?Boolean} asBlob\n * @param {?Object} options\n * @param {?Function} options.Blob\n *\n * @returns {Buffer|Blob}\n */\n\nexport default function fromDataURI(uri, asBlob, options) {\n  const _Blob = options && options.Blob || platform.classes.Blob;\n\n  const protocol = parseProtocol(uri);\n\n  if (asBlob === undefined && _Blob) {\n    asBlob = true;\n  }\n\n  if (protocol === 'data') {\n    uri = protocol.length ? uri.slice(protocol.length + 1) : uri;\n    const match = DATA_URL_PATTERN.exec(uri);\n\n    if (!match) {\n      throw new AxiosError('Invalid URL', AxiosError.ERR_INVALID_URL);\n    }\n\n    const mime = match[1];\n    const isBase64 = match[2];\n    const body = match[3];\n    const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? 'base64' : 'utf8');\n\n    if (asBlob) {\n      if (!_Blob) {\n        throw new AxiosError('Blob is not supported', AxiosError.ERR_NOT_SUPPORT);\n      }\n\n      return new _Blob([buffer], {\n        type: mime\n      });\n    }\n\n    return buffer;\n  }\n\n  throw new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_NOT_SUPPORT);\n}","map":{"version":3,"sources":["/Users/pranavvuddagiri/Desktop/minorhome/node_modules/axios/lib/helpers/fromDataURI.js"],"names":["AxiosError","parseProtocol","platform","DATA_URL_PATTERN","fromDataURI","uri","asBlob","options","_Blob","Blob","classes","protocol","undefined","length","slice","match","exec","ERR_INVALID_URL","mime","isBase64","body","buffer","Buffer","from","decodeURIComponent","ERR_NOT_SUPPORT","type"],"mappings":"AAAA;;AAEA,OAAOA,UAAP,MAAuB,uBAAvB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,MAAMC,gBAAgB,GAAG,+CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,MAA1B,EAAkCC,OAAlC,EAA2C;AACxD,QAAMC,KAAK,GAAGD,OAAO,IAAIA,OAAO,CAACE,IAAnB,IAA2BP,QAAQ,CAACQ,OAAT,CAAiBD,IAA1D;;AACA,QAAME,QAAQ,GAAGV,aAAa,CAACI,GAAD,CAA9B;;AAEA,MAAIC,MAAM,KAAKM,SAAX,IAAwBJ,KAA5B,EAAmC;AACjCF,IAAAA,MAAM,GAAG,IAAT;AACD;;AAED,MAAIK,QAAQ,KAAK,MAAjB,EAAyB;AACvBN,IAAAA,GAAG,GAAGM,QAAQ,CAACE,MAAT,GAAkBR,GAAG,CAACS,KAAJ,CAAUH,QAAQ,CAACE,MAAT,GAAkB,CAA5B,CAAlB,GAAmDR,GAAzD;AAEA,UAAMU,KAAK,GAAGZ,gBAAgB,CAACa,IAAjB,CAAsBX,GAAtB,CAAd;;AAEA,QAAI,CAACU,KAAL,EAAY;AACV,YAAM,IAAIf,UAAJ,CAAe,aAAf,EAA8BA,UAAU,CAACiB,eAAzC,CAAN;AACD;;AAED,UAAMC,IAAI,GAAGH,KAAK,CAAC,CAAD,CAAlB;AACA,UAAMI,QAAQ,GAAGJ,KAAK,CAAC,CAAD,CAAtB;AACA,UAAMK,IAAI,GAAGL,KAAK,CAAC,CAAD,CAAlB;AACA,UAAMM,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYC,kBAAkB,CAACJ,IAAD,CAA9B,EAAsCD,QAAQ,GAAG,QAAH,GAAc,MAA5D,CAAf;;AAEA,QAAIb,MAAJ,EAAY;AACV,UAAI,CAACE,KAAL,EAAY;AACV,cAAM,IAAIR,UAAJ,CAAe,uBAAf,EAAwCA,UAAU,CAACyB,eAAnD,CAAN;AACD;;AAED,aAAO,IAAIjB,KAAJ,CAAU,CAACa,MAAD,CAAV,EAAoB;AAACK,QAAAA,IAAI,EAAER;AAAP,OAApB,CAAP;AACD;;AAED,WAAOG,MAAP;AACD;;AAED,QAAM,IAAIrB,UAAJ,CAAe,0BAA0BW,QAAzC,EAAmDX,UAAU,CAACyB,eAA9D,CAAN;AACD","sourcesContent":["'use strict';\n\nimport AxiosError from '../core/AxiosError.js';\nimport parseProtocol from './parseProtocol.js';\nimport platform from '../platform/index.js';\n\nconst DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\\s\\S]*)$/;\n\n/**\n * Parse data uri to a Buffer or Blob\n *\n * @param {String} uri\n * @param {?Boolean} asBlob\n * @param {?Object} options\n * @param {?Function} options.Blob\n *\n * @returns {Buffer|Blob}\n */\nexport default function fromDataURI(uri, asBlob, options) {\n  const _Blob = options && options.Blob || platform.classes.Blob;\n  const protocol = parseProtocol(uri);\n\n  if (asBlob === undefined && _Blob) {\n    asBlob = true;\n  }\n\n  if (protocol === 'data') {\n    uri = protocol.length ? uri.slice(protocol.length + 1) : uri;\n\n    const match = DATA_URL_PATTERN.exec(uri);\n\n    if (!match) {\n      throw new AxiosError('Invalid URL', AxiosError.ERR_INVALID_URL);\n    }\n\n    const mime = match[1];\n    const isBase64 = match[2];\n    const body = match[3];\n    const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? 'base64' : 'utf8');\n\n    if (asBlob) {\n      if (!_Blob) {\n        throw new AxiosError('Blob is not supported', AxiosError.ERR_NOT_SUPPORT);\n      }\n\n      return new _Blob([buffer], {type: mime});\n    }\n\n    return buffer;\n  }\n\n  throw new AxiosError('Unsupported protocol ' + protocol, AxiosError.ERR_NOT_SUPPORT);\n}\n"]},"metadata":{},"sourceType":"module"}