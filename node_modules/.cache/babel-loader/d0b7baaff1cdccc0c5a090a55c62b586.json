{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport { useBaseProps } from 'rc-select';\nimport Tree from 'rc-tree';\nimport LegacyContext from \"./LegacyContext\";\nimport TreeSelectContext from \"./TreeSelectContext\";\nimport { getAllKeys, isCheckDisabled } from \"./utils/valueUtil\";\nvar HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: 'flex',\n  overflow: 'hidden',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\n\nvar OptionList = function OptionList(_, ref) {\n  var _useBaseProps = useBaseProps(),\n      prefixCls = _useBaseProps.prefixCls,\n      multiple = _useBaseProps.multiple,\n      searchValue = _useBaseProps.searchValue,\n      toggleOpen = _useBaseProps.toggleOpen,\n      open = _useBaseProps.open,\n      notFoundContent = _useBaseProps.notFoundContent;\n\n  var _React$useContext = React.useContext(TreeSelectContext),\n      virtual = _React$useContext.virtual,\n      listHeight = _React$useContext.listHeight,\n      listItemHeight = _React$useContext.listItemHeight,\n      listItemScrollOffset = _React$useContext.listItemScrollOffset,\n      treeData = _React$useContext.treeData,\n      fieldNames = _React$useContext.fieldNames,\n      onSelect = _React$useContext.onSelect,\n      dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth,\n      treeExpandAction = _React$useContext.treeExpandAction;\n\n  var _React$useContext2 = React.useContext(LegacyContext),\n      checkable = _React$useContext2.checkable,\n      checkedKeys = _React$useContext2.checkedKeys,\n      halfCheckedKeys = _React$useContext2.halfCheckedKeys,\n      treeExpandedKeys = _React$useContext2.treeExpandedKeys,\n      treeDefaultExpandAll = _React$useContext2.treeDefaultExpandAll,\n      treeDefaultExpandedKeys = _React$useContext2.treeDefaultExpandedKeys,\n      onTreeExpand = _React$useContext2.onTreeExpand,\n      treeIcon = _React$useContext2.treeIcon,\n      showTreeIcon = _React$useContext2.showTreeIcon,\n      switcherIcon = _React$useContext2.switcherIcon,\n      treeLine = _React$useContext2.treeLine,\n      treeNodeFilterProp = _React$useContext2.treeNodeFilterProp,\n      loadData = _React$useContext2.loadData,\n      treeLoadedKeys = _React$useContext2.treeLoadedKeys,\n      treeMotion = _React$useContext2.treeMotion,\n      onTreeLoad = _React$useContext2.onTreeLoad,\n      keyEntities = _React$useContext2.keyEntities;\n\n  var treeRef = React.useRef();\n  var memoTreeData = useMemo(function () {\n    return treeData;\n  }, [open, treeData], function (prev, next) {\n    return next[0] && prev[1] !== next[1];\n  }); // ========================== Active ==========================\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      activeKey = _React$useState2[0],\n      setActiveKey = _React$useState2[1];\n\n  var activeEntity = keyEntities[activeKey]; // ========================== Values ==========================\n\n  var mergedCheckedKeys = React.useMemo(function () {\n    if (!checkable) {\n      return null;\n    }\n\n    return {\n      checked: checkedKeys,\n      halfChecked: halfCheckedKeys\n    };\n  }, [checkable, checkedKeys, halfCheckedKeys]); // ========================== Scroll ==========================\n\n  React.useEffect(function () {\n    // Single mode should scroll to current key\n    if (open && !multiple && checkedKeys.length) {\n      var _treeRef$current;\n\n      (_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 || _treeRef$current.scrollTo({\n        key: checkedKeys[0]\n      });\n      setActiveKey(checkedKeys[0]);\n    }\n  }, [open]); // ========================== Search ==========================\n\n  var lowerSearchValue = String(searchValue).toLowerCase();\n\n  var filterTreeNode = function filterTreeNode(treeNode) {\n    if (!lowerSearchValue) {\n      return false;\n    }\n\n    return String(treeNode[treeNodeFilterProp]).toLowerCase().includes(lowerSearchValue);\n  }; // =========================== Keys ===========================\n\n\n  var _React$useState3 = React.useState(treeDefaultExpandedKeys),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      expandedKeys = _React$useState4[0],\n      setExpandedKeys = _React$useState4[1];\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      searchExpandedKeys = _React$useState6[0],\n      setSearchExpandedKeys = _React$useState6[1];\n\n  var mergedExpandedKeys = React.useMemo(function () {\n    if (treeExpandedKeys) {\n      return _toConsumableArray(treeExpandedKeys);\n    }\n\n    return searchValue ? searchExpandedKeys : expandedKeys;\n  }, [expandedKeys, searchExpandedKeys, treeExpandedKeys, searchValue]);\n  React.useEffect(function () {\n    if (searchValue) {\n      setSearchExpandedKeys(getAllKeys(treeData, fieldNames));\n    }\n  }, [searchValue]);\n\n  var onInternalExpand = function onInternalExpand(keys) {\n    setExpandedKeys(keys);\n    setSearchExpandedKeys(keys);\n\n    if (onTreeExpand) {\n      onTreeExpand(keys);\n    }\n  }; // ========================== Events ==========================\n\n\n  var onListMouseDown = function onListMouseDown(event) {\n    event.preventDefault();\n  };\n\n  var onInternalSelect = function onInternalSelect(__, info) {\n    var node = info.node;\n\n    if (checkable && isCheckDisabled(node)) {\n      return;\n    }\n\n    onSelect(node.key, {\n      selected: !checkedKeys.includes(node.key)\n    });\n\n    if (!multiple) {\n      toggleOpen(false);\n    }\n  }; // ========================= Keyboard =========================\n\n\n  React.useImperativeHandle(ref, function () {\n    var _treeRef$current2;\n\n    return {\n      scrollTo: (_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.scrollTo,\n      onKeyDown: function onKeyDown(event) {\n        var _treeRef$current3;\n\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n          case KeyCode.LEFT:\n          case KeyCode.RIGHT:\n            (_treeRef$current3 = treeRef.current) === null || _treeRef$current3 === void 0 || _treeRef$current3.onKeyDown(event);\n            break;\n          // >>> Select item\n\n          case KeyCode.ENTER:\n            {\n              if (activeEntity) {\n                var _ref = (activeEntity === null || activeEntity === void 0 ? void 0 : activeEntity.node) || {},\n                    selectable = _ref.selectable,\n                    value = _ref.value;\n\n                if (selectable !== false) {\n                  onInternalSelect(null, {\n                    node: {\n                      key: activeKey\n                    },\n                    selected: !checkedKeys.includes(value)\n                  });\n                }\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              toggleOpen(false);\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  if (memoTreeData.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      role: \"listbox\",\n      className: \"\".concat(prefixCls, \"-empty\"),\n      onMouseDown: onListMouseDown\n    }, notFoundContent);\n  }\n\n  var treeProps = {\n    fieldNames: fieldNames\n  };\n\n  if (treeLoadedKeys) {\n    treeProps.loadedKeys = treeLoadedKeys;\n  }\n\n  if (mergedExpandedKeys) {\n    treeProps.expandedKeys = mergedExpandedKeys;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onMouseDown: onListMouseDown\n  }, activeEntity && open && /*#__PURE__*/React.createElement(\"span\", {\n    style: HIDDEN_STYLE,\n    \"aria-live\": \"assertive\"\n  }, activeEntity.node.value), /*#__PURE__*/React.createElement(Tree, _extends({\n    ref: treeRef,\n    focusable: false,\n    prefixCls: \"\".concat(prefixCls, \"-tree\"),\n    treeData: memoTreeData,\n    height: listHeight,\n    itemHeight: listItemHeight,\n    itemScrollOffset: listItemScrollOffset,\n    virtual: virtual !== false && dropdownMatchSelectWidth !== false,\n    multiple: multiple,\n    icon: treeIcon,\n    showIcon: showTreeIcon,\n    switcherIcon: switcherIcon,\n    showLine: treeLine,\n    loadData: searchValue ? null : loadData,\n    motion: treeMotion,\n    activeKey: activeKey // We handle keys by out instead tree self\n    ,\n    checkable: checkable,\n    checkStrictly: true,\n    checkedKeys: mergedCheckedKeys,\n    selectedKeys: !checkable ? checkedKeys : [],\n    defaultExpandAll: treeDefaultExpandAll\n  }, treeProps, {\n    // Proxy event out\n    onActiveChange: setActiveKey,\n    onSelect: onInternalSelect,\n    onCheck: onInternalSelect,\n    onExpand: onInternalExpand,\n    onLoad: onTreeLoad,\n    filterTreeNode: filterTreeNode,\n    expandAction: treeExpandAction\n  })));\n};\n\nvar RefOptionList = /*#__PURE__*/React.forwardRef(OptionList);\nRefOptionList.displayName = 'OptionList';\nexport default RefOptionList;","map":{"version":3,"sources":["/Users/pranavvuddagiri/Desktop/minorhome/node_modules/rc-tree-select/es/OptionList.js"],"names":["_extends","_toConsumableArray","_slicedToArray","React","KeyCode","useMemo","useBaseProps","Tree","LegacyContext","TreeSelectContext","getAllKeys","isCheckDisabled","HIDDEN_STYLE","width","height","display","overflow","opacity","border","padding","margin","OptionList","_","ref","_useBaseProps","prefixCls","multiple","searchValue","toggleOpen","open","notFoundContent","_React$useContext","useContext","virtual","listHeight","listItemHeight","listItemScrollOffset","treeData","fieldNames","onSelect","dropdownMatchSelectWidth","treeExpandAction","_React$useContext2","checkable","checkedKeys","halfCheckedKeys","treeExpandedKeys","treeDefaultExpandAll","treeDefaultExpandedKeys","onTreeExpand","treeIcon","showTreeIcon","switcherIcon","treeLine","treeNodeFilterProp","loadData","treeLoadedKeys","treeMotion","onTreeLoad","keyEntities","treeRef","useRef","memoTreeData","prev","next","_React$useState","useState","_React$useState2","activeKey","setActiveKey","activeEntity","mergedCheckedKeys","checked","halfChecked","useEffect","length","_treeRef$current","current","scrollTo","key","lowerSearchValue","String","toLowerCase","filterTreeNode","treeNode","includes","_React$useState3","_React$useState4","expandedKeys","setExpandedKeys","_React$useState5","_React$useState6","searchExpandedKeys","setSearchExpandedKeys","mergedExpandedKeys","onInternalExpand","keys","onListMouseDown","event","preventDefault","onInternalSelect","__","info","node","selected","useImperativeHandle","_treeRef$current2","onKeyDown","_treeRef$current3","which","UP","DOWN","LEFT","RIGHT","ENTER","_ref","selectable","value","ESC","onKeyUp","createElement","role","className","concat","onMouseDown","treeProps","loadedKeys","style","focusable","itemHeight","itemScrollOffset","icon","showIcon","showLine","motion","checkStrictly","selectedKeys","defaultExpandAll","onActiveChange","onCheck","onExpand","onLoad","expandAction","RefOptionList","forwardRef","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport { useBaseProps } from 'rc-select';\nimport Tree from 'rc-tree';\nimport LegacyContext from \"./LegacyContext\";\nimport TreeSelectContext from \"./TreeSelectContext\";\nimport { getAllKeys, isCheckDisabled } from \"./utils/valueUtil\";\nvar HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: 'flex',\n  overflow: 'hidden',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\nvar OptionList = function OptionList(_, ref) {\n  var _useBaseProps = useBaseProps(),\n    prefixCls = _useBaseProps.prefixCls,\n    multiple = _useBaseProps.multiple,\n    searchValue = _useBaseProps.searchValue,\n    toggleOpen = _useBaseProps.toggleOpen,\n    open = _useBaseProps.open,\n    notFoundContent = _useBaseProps.notFoundContent;\n  var _React$useContext = React.useContext(TreeSelectContext),\n    virtual = _React$useContext.virtual,\n    listHeight = _React$useContext.listHeight,\n    listItemHeight = _React$useContext.listItemHeight,\n    listItemScrollOffset = _React$useContext.listItemScrollOffset,\n    treeData = _React$useContext.treeData,\n    fieldNames = _React$useContext.fieldNames,\n    onSelect = _React$useContext.onSelect,\n    dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth,\n    treeExpandAction = _React$useContext.treeExpandAction;\n  var _React$useContext2 = React.useContext(LegacyContext),\n    checkable = _React$useContext2.checkable,\n    checkedKeys = _React$useContext2.checkedKeys,\n    halfCheckedKeys = _React$useContext2.halfCheckedKeys,\n    treeExpandedKeys = _React$useContext2.treeExpandedKeys,\n    treeDefaultExpandAll = _React$useContext2.treeDefaultExpandAll,\n    treeDefaultExpandedKeys = _React$useContext2.treeDefaultExpandedKeys,\n    onTreeExpand = _React$useContext2.onTreeExpand,\n    treeIcon = _React$useContext2.treeIcon,\n    showTreeIcon = _React$useContext2.showTreeIcon,\n    switcherIcon = _React$useContext2.switcherIcon,\n    treeLine = _React$useContext2.treeLine,\n    treeNodeFilterProp = _React$useContext2.treeNodeFilterProp,\n    loadData = _React$useContext2.loadData,\n    treeLoadedKeys = _React$useContext2.treeLoadedKeys,\n    treeMotion = _React$useContext2.treeMotion,\n    onTreeLoad = _React$useContext2.onTreeLoad,\n    keyEntities = _React$useContext2.keyEntities;\n  var treeRef = React.useRef();\n  var memoTreeData = useMemo(function () {\n    return treeData;\n  }, [open, treeData], function (prev, next) {\n    return next[0] && prev[1] !== next[1];\n  });\n\n  // ========================== Active ==========================\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    activeKey = _React$useState2[0],\n    setActiveKey = _React$useState2[1];\n  var activeEntity = keyEntities[activeKey];\n\n  // ========================== Values ==========================\n  var mergedCheckedKeys = React.useMemo(function () {\n    if (!checkable) {\n      return null;\n    }\n    return {\n      checked: checkedKeys,\n      halfChecked: halfCheckedKeys\n    };\n  }, [checkable, checkedKeys, halfCheckedKeys]);\n\n  // ========================== Scroll ==========================\n  React.useEffect(function () {\n    // Single mode should scroll to current key\n    if (open && !multiple && checkedKeys.length) {\n      var _treeRef$current;\n      (_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 || _treeRef$current.scrollTo({\n        key: checkedKeys[0]\n      });\n      setActiveKey(checkedKeys[0]);\n    }\n  }, [open]);\n\n  // ========================== Search ==========================\n  var lowerSearchValue = String(searchValue).toLowerCase();\n  var filterTreeNode = function filterTreeNode(treeNode) {\n    if (!lowerSearchValue) {\n      return false;\n    }\n    return String(treeNode[treeNodeFilterProp]).toLowerCase().includes(lowerSearchValue);\n  };\n\n  // =========================== Keys ===========================\n  var _React$useState3 = React.useState(treeDefaultExpandedKeys),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    expandedKeys = _React$useState4[0],\n    setExpandedKeys = _React$useState4[1];\n  var _React$useState5 = React.useState(null),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    searchExpandedKeys = _React$useState6[0],\n    setSearchExpandedKeys = _React$useState6[1];\n  var mergedExpandedKeys = React.useMemo(function () {\n    if (treeExpandedKeys) {\n      return _toConsumableArray(treeExpandedKeys);\n    }\n    return searchValue ? searchExpandedKeys : expandedKeys;\n  }, [expandedKeys, searchExpandedKeys, treeExpandedKeys, searchValue]);\n  React.useEffect(function () {\n    if (searchValue) {\n      setSearchExpandedKeys(getAllKeys(treeData, fieldNames));\n    }\n  }, [searchValue]);\n  var onInternalExpand = function onInternalExpand(keys) {\n    setExpandedKeys(keys);\n    setSearchExpandedKeys(keys);\n    if (onTreeExpand) {\n      onTreeExpand(keys);\n    }\n  };\n\n  // ========================== Events ==========================\n  var onListMouseDown = function onListMouseDown(event) {\n    event.preventDefault();\n  };\n  var onInternalSelect = function onInternalSelect(__, info) {\n    var node = info.node;\n    if (checkable && isCheckDisabled(node)) {\n      return;\n    }\n    onSelect(node.key, {\n      selected: !checkedKeys.includes(node.key)\n    });\n    if (!multiple) {\n      toggleOpen(false);\n    }\n  };\n\n  // ========================= Keyboard =========================\n  React.useImperativeHandle(ref, function () {\n    var _treeRef$current2;\n    return {\n      scrollTo: (_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.scrollTo,\n      onKeyDown: function onKeyDown(event) {\n        var _treeRef$current3;\n        var which = event.which;\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n          case KeyCode.LEFT:\n          case KeyCode.RIGHT:\n            (_treeRef$current3 = treeRef.current) === null || _treeRef$current3 === void 0 || _treeRef$current3.onKeyDown(event);\n            break;\n\n          // >>> Select item\n          case KeyCode.ENTER:\n            {\n              if (activeEntity) {\n                var _ref = (activeEntity === null || activeEntity === void 0 ? void 0 : activeEntity.node) || {},\n                  selectable = _ref.selectable,\n                  value = _ref.value;\n                if (selectable !== false) {\n                  onInternalSelect(null, {\n                    node: {\n                      key: activeKey\n                    },\n                    selected: !checkedKeys.includes(value)\n                  });\n                }\n              }\n              break;\n            }\n\n          // >>> Close\n          case KeyCode.ESC:\n            {\n              toggleOpen(false);\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  });\n\n  // ========================== Render ==========================\n  if (memoTreeData.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      role: \"listbox\",\n      className: \"\".concat(prefixCls, \"-empty\"),\n      onMouseDown: onListMouseDown\n    }, notFoundContent);\n  }\n  var treeProps = {\n    fieldNames: fieldNames\n  };\n  if (treeLoadedKeys) {\n    treeProps.loadedKeys = treeLoadedKeys;\n  }\n  if (mergedExpandedKeys) {\n    treeProps.expandedKeys = mergedExpandedKeys;\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onMouseDown: onListMouseDown\n  }, activeEntity && open && /*#__PURE__*/React.createElement(\"span\", {\n    style: HIDDEN_STYLE,\n    \"aria-live\": \"assertive\"\n  }, activeEntity.node.value), /*#__PURE__*/React.createElement(Tree, _extends({\n    ref: treeRef,\n    focusable: false,\n    prefixCls: \"\".concat(prefixCls, \"-tree\"),\n    treeData: memoTreeData,\n    height: listHeight,\n    itemHeight: listItemHeight,\n    itemScrollOffset: listItemScrollOffset,\n    virtual: virtual !== false && dropdownMatchSelectWidth !== false,\n    multiple: multiple,\n    icon: treeIcon,\n    showIcon: showTreeIcon,\n    switcherIcon: switcherIcon,\n    showLine: treeLine,\n    loadData: searchValue ? null : loadData,\n    motion: treeMotion,\n    activeKey: activeKey\n    // We handle keys by out instead tree self\n    ,\n    checkable: checkable,\n    checkStrictly: true,\n    checkedKeys: mergedCheckedKeys,\n    selectedKeys: !checkable ? checkedKeys : [],\n    defaultExpandAll: treeDefaultExpandAll\n  }, treeProps, {\n    // Proxy event out\n    onActiveChange: setActiveKey,\n    onSelect: onInternalSelect,\n    onCheck: onInternalSelect,\n    onExpand: onInternalExpand,\n    onLoad: onTreeLoad,\n    filterTreeNode: filterTreeNode,\n    expandAction: treeExpandAction\n  })));\n};\nvar RefOptionList = /*#__PURE__*/React.forwardRef(OptionList);\nRefOptionList.displayName = 'OptionList';\nexport default RefOptionList;"]},"metadata":{},"sourceType":"module"}