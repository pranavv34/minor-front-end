{"ast":null,"code":"\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useContext, useMemo, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport genPurePanel from '../_util/PurePanel';\nimport { getStatusClassNames } from '../_util/statusUtils';\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider/context';\nimport DisabledContext from '../config-provider/DisabledContext';\nimport useSize from '../config-provider/hooks/useSize';\nimport { FormItemInputContext, NoFormStyle } from '../form/context';\nimport Popover from '../popover';\nimport { useToken } from '../theme/internal';\nimport ColorPickerPanel from './ColorPickerPanel';\nimport ColorTrigger from './components/ColorTrigger';\nimport useColorState from './hooks/useColorState';\nimport useStyle from './style/index';\nimport { customizePrefixCls, genAlphaColor, generateColor, getAlphaColor } from './util';\n\nconst ColorPicker = props => {\n  const {\n    value,\n    defaultValue,\n    format,\n    defaultFormat,\n    allowClear = false,\n    presets,\n    children,\n    trigger = 'click',\n    open,\n    disabled,\n    placement = 'bottomLeft',\n    arrow = true,\n    panelRender,\n    showText,\n    style,\n    className,\n    size: customizeSize,\n    rootClassName,\n    styles,\n    disabledAlpha = false,\n    onFormatChange,\n    onChange,\n    onClear,\n    onOpenChange,\n    onChangeComplete,\n    getPopupContainer,\n    autoAdjustOverflow = true,\n    destroyTooltipOnHide\n  } = props,\n        rest = __rest(props, [\"value\", \"defaultValue\", \"format\", \"defaultFormat\", \"allowClear\", \"presets\", \"children\", \"trigger\", \"open\", \"disabled\", \"placement\", \"arrow\", \"panelRender\", \"showText\", \"style\", \"className\", \"size\", \"rootClassName\", \"styles\", \"disabledAlpha\", \"onFormatChange\", \"onChange\", \"onClear\", \"onOpenChange\", \"onChangeComplete\", \"getPopupContainer\", \"autoAdjustOverflow\", \"destroyTooltipOnHide\"]);\n\n  const {\n    getPrefixCls,\n    direction,\n    colorPicker\n  } = useContext(ConfigContext);\n  const contextDisabled = useContext(DisabledContext);\n  const mergedDisabled = disabled !== null && disabled !== void 0 ? disabled : contextDisabled;\n  const [, token] = useToken();\n  const [colorValue, setColorValue] = useColorState(token.colorPrimary, {\n    value,\n    defaultValue\n  });\n  const [popupOpen, setPopupOpen] = useMergedState(false, {\n    value: open,\n    postState: openData => !mergedDisabled && openData,\n    onChange: onOpenChange\n  });\n  const [formatValue, setFormatValue] = useMergedState(format, {\n    value: format,\n    defaultValue: defaultFormat,\n    onChange: onFormatChange\n  });\n  const [colorCleared, setColorCleared] = useState(false);\n  const prefixCls = getPrefixCls('color-picker', customizePrefixCls);\n  const isAlphaColor = useMemo(() => getAlphaColor(colorValue) < 100, [colorValue]); // ===================== Form Status =====================\n\n  const {\n    status: contextStatus\n  } = React.useContext(FormItemInputContext); // ===================== Style =====================\n\n  const mergedSize = useSize(customizeSize);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const rtlCls = {\n    [`${prefixCls}-rtl`]: direction\n  };\n  const mergeRootCls = classNames(rootClassName, rtlCls);\n  const mergeCls = classNames(getStatusClassNames(prefixCls, contextStatus), {\n    [`${prefixCls}-sm`]: mergedSize === 'small',\n    [`${prefixCls}-lg`]: mergedSize === 'large'\n  }, colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.className, mergeRootCls, className, hashId);\n  const mergePopupCls = classNames(prefixCls, rtlCls);\n  const popupAllowCloseRef = useRef(true); // ===================== Warning ======================\n\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('ColorPicker');\n    process.env.NODE_ENV !== \"production\" ? warning(!(disabledAlpha && isAlphaColor), 'usage', '`disabledAlpha` will make the alpha to be 100% when use alpha color.') : void 0;\n  }\n\n  const handleChange = (data, type, pickColor) => {\n    let color = generateColor(data);\n    const isNull = value === null || !value && defaultValue === null;\n\n    if (colorCleared || isNull) {\n      setColorCleared(false); // ignore alpha slider\n\n      if (getAlphaColor(colorValue) === 0 && type !== 'alpha') {\n        color = genAlphaColor(color);\n      }\n    } // ignore alpha color\n\n\n    if (disabledAlpha && isAlphaColor) {\n      color = genAlphaColor(color);\n    } // Only for drag-and-drop color picking\n\n\n    if (pickColor) {\n      popupAllowCloseRef.current = false;\n    } else {\n      onChangeComplete === null || onChangeComplete === void 0 ? void 0 : onChangeComplete(color);\n    }\n\n    setColorValue(color);\n    onChange === null || onChange === void 0 ? void 0 : onChange(color, color.toHexString());\n  };\n\n  const handleClear = () => {\n    setColorCleared(true);\n    onClear === null || onClear === void 0 ? void 0 : onClear();\n  };\n\n  const handleChangeComplete = color => {\n    popupAllowCloseRef.current = true;\n    let changeColor = generateColor(color); // ignore alpha color\n\n    if (disabledAlpha && isAlphaColor) {\n      changeColor = genAlphaColor(color);\n    }\n\n    onChangeComplete === null || onChangeComplete === void 0 ? void 0 : onChangeComplete(changeColor);\n  };\n\n  const popoverProps = {\n    open: popupOpen,\n    trigger,\n    placement,\n    arrow,\n    rootClassName,\n    getPopupContainer,\n    autoAdjustOverflow,\n    destroyTooltipOnHide\n  };\n  const colorBaseProps = {\n    prefixCls,\n    color: colorValue,\n    allowClear,\n    colorCleared,\n    disabled: mergedDisabled,\n    disabledAlpha,\n    presets,\n    panelRender,\n    format: formatValue,\n    onFormatChange: setFormatValue,\n    onChangeComplete: handleChangeComplete\n  };\n  const mergedStyle = Object.assign(Object.assign({}, colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.style), style); // ============================ zIndex ============================\n\n  return wrapSSR( /*#__PURE__*/React.createElement(Popover, Object.assign({\n    style: styles === null || styles === void 0 ? void 0 : styles.popup,\n    overlayInnerStyle: styles === null || styles === void 0 ? void 0 : styles.popupOverlayInner,\n    onOpenChange: visible => {\n      if (popupAllowCloseRef.current && !mergedDisabled) {\n        setPopupOpen(visible);\n      }\n    },\n    content: /*#__PURE__*/React.createElement(NoFormStyle, {\n      override: true,\n      status: true\n    }, /*#__PURE__*/React.createElement(ColorPickerPanel, Object.assign({}, colorBaseProps, {\n      onChange: handleChange,\n      onChangeComplete: handleChangeComplete,\n      onClear: handleClear\n    }))),\n    overlayClassName: mergePopupCls\n  }, popoverProps), children || /*#__PURE__*/React.createElement(ColorTrigger, Object.assign({\n    open: popupOpen,\n    className: mergeCls,\n    style: mergedStyle,\n    color: value ? generateColor(value) : colorValue,\n    prefixCls: prefixCls,\n    disabled: mergedDisabled,\n    colorCleared: colorCleared,\n    showText: showText,\n    format: formatValue\n  }, rest))));\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  ColorPicker.displayName = 'ColorPicker';\n}\n\nconst PurePanel = genPurePanel(ColorPicker, 'color-picker',\n/* istanbul ignore next */\nprefixCls => prefixCls, props => Object.assign(Object.assign({}, props), {\n  placement: 'bottom',\n  autoAdjustOverflow: false\n}));\nColorPicker._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default ColorPicker;","map":{"version":3,"sources":["/Users/pranavvuddagiri/Desktop/minorhome/node_modules/antd/es/color-picker/ColorPicker.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","propertyIsEnumerable","React","useContext","useMemo","useRef","useState","classNames","useMergedState","genPurePanel","getStatusClassNames","devUseWarning","ConfigContext","DisabledContext","useSize","FormItemInputContext","NoFormStyle","Popover","useToken","ColorPickerPanel","ColorTrigger","useColorState","useStyle","customizePrefixCls","genAlphaColor","generateColor","getAlphaColor","ColorPicker","props","value","defaultValue","format","defaultFormat","allowClear","presets","children","trigger","open","disabled","placement","arrow","panelRender","showText","style","className","size","customizeSize","rootClassName","styles","disabledAlpha","onFormatChange","onChange","onClear","onOpenChange","onChangeComplete","getPopupContainer","autoAdjustOverflow","destroyTooltipOnHide","rest","getPrefixCls","direction","colorPicker","contextDisabled","mergedDisabled","token","colorValue","setColorValue","colorPrimary","popupOpen","setPopupOpen","postState","openData","formatValue","setFormatValue","colorCleared","setColorCleared","prefixCls","isAlphaColor","status","contextStatus","mergedSize","wrapSSR","hashId","rtlCls","mergeRootCls","mergeCls","mergePopupCls","popupAllowCloseRef","process","env","NODE_ENV","warning","handleChange","data","type","pickColor","color","isNull","current","toHexString","handleClear","handleChangeComplete","changeColor","popoverProps","colorBaseProps","mergedStyle","assign","createElement","popup","overlayInnerStyle","popupOverlayInner","visible","content","override","overlayClassName","displayName","PurePanel","_InternalPanelDoNotUseOrYouWillBeFired"],"mappings":"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","sourcesContent":["\"use client\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { useContext, useMemo, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport genPurePanel from '../_util/PurePanel';\nimport { getStatusClassNames } from '../_util/statusUtils';\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider/context';\nimport DisabledContext from '../config-provider/DisabledContext';\nimport useSize from '../config-provider/hooks/useSize';\nimport { FormItemInputContext, NoFormStyle } from '../form/context';\nimport Popover from '../popover';\nimport { useToken } from '../theme/internal';\nimport ColorPickerPanel from './ColorPickerPanel';\nimport ColorTrigger from './components/ColorTrigger';\nimport useColorState from './hooks/useColorState';\nimport useStyle from './style/index';\nimport { customizePrefixCls, genAlphaColor, generateColor, getAlphaColor } from './util';\nconst ColorPicker = props => {\n  const {\n      value,\n      defaultValue,\n      format,\n      defaultFormat,\n      allowClear = false,\n      presets,\n      children,\n      trigger = 'click',\n      open,\n      disabled,\n      placement = 'bottomLeft',\n      arrow = true,\n      panelRender,\n      showText,\n      style,\n      className,\n      size: customizeSize,\n      rootClassName,\n      styles,\n      disabledAlpha = false,\n      onFormatChange,\n      onChange,\n      onClear,\n      onOpenChange,\n      onChangeComplete,\n      getPopupContainer,\n      autoAdjustOverflow = true,\n      destroyTooltipOnHide\n    } = props,\n    rest = __rest(props, [\"value\", \"defaultValue\", \"format\", \"defaultFormat\", \"allowClear\", \"presets\", \"children\", \"trigger\", \"open\", \"disabled\", \"placement\", \"arrow\", \"panelRender\", \"showText\", \"style\", \"className\", \"size\", \"rootClassName\", \"styles\", \"disabledAlpha\", \"onFormatChange\", \"onChange\", \"onClear\", \"onOpenChange\", \"onChangeComplete\", \"getPopupContainer\", \"autoAdjustOverflow\", \"destroyTooltipOnHide\"]);\n  const {\n    getPrefixCls,\n    direction,\n    colorPicker\n  } = useContext(ConfigContext);\n  const contextDisabled = useContext(DisabledContext);\n  const mergedDisabled = disabled !== null && disabled !== void 0 ? disabled : contextDisabled;\n  const [, token] = useToken();\n  const [colorValue, setColorValue] = useColorState(token.colorPrimary, {\n    value,\n    defaultValue\n  });\n  const [popupOpen, setPopupOpen] = useMergedState(false, {\n    value: open,\n    postState: openData => !mergedDisabled && openData,\n    onChange: onOpenChange\n  });\n  const [formatValue, setFormatValue] = useMergedState(format, {\n    value: format,\n    defaultValue: defaultFormat,\n    onChange: onFormatChange\n  });\n  const [colorCleared, setColorCleared] = useState(false);\n  const prefixCls = getPrefixCls('color-picker', customizePrefixCls);\n  const isAlphaColor = useMemo(() => getAlphaColor(colorValue) < 100, [colorValue]);\n  // ===================== Form Status =====================\n  const {\n    status: contextStatus\n  } = React.useContext(FormItemInputContext);\n  // ===================== Style =====================\n  const mergedSize = useSize(customizeSize);\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const rtlCls = {\n    [`${prefixCls}-rtl`]: direction\n  };\n  const mergeRootCls = classNames(rootClassName, rtlCls);\n  const mergeCls = classNames(getStatusClassNames(prefixCls, contextStatus), {\n    [`${prefixCls}-sm`]: mergedSize === 'small',\n    [`${prefixCls}-lg`]: mergedSize === 'large'\n  }, colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.className, mergeRootCls, className, hashId);\n  const mergePopupCls = classNames(prefixCls, rtlCls);\n  const popupAllowCloseRef = useRef(true);\n  // ===================== Warning ======================\n  if (process.env.NODE_ENV !== 'production') {\n    const warning = devUseWarning('ColorPicker');\n    process.env.NODE_ENV !== \"production\" ? warning(!(disabledAlpha && isAlphaColor), 'usage', '`disabledAlpha` will make the alpha to be 100% when use alpha color.') : void 0;\n  }\n  const handleChange = (data, type, pickColor) => {\n    let color = generateColor(data);\n    const isNull = value === null || !value && defaultValue === null;\n    if (colorCleared || isNull) {\n      setColorCleared(false);\n      // ignore alpha slider\n      if (getAlphaColor(colorValue) === 0 && type !== 'alpha') {\n        color = genAlphaColor(color);\n      }\n    }\n    // ignore alpha color\n    if (disabledAlpha && isAlphaColor) {\n      color = genAlphaColor(color);\n    }\n    // Only for drag-and-drop color picking\n    if (pickColor) {\n      popupAllowCloseRef.current = false;\n    } else {\n      onChangeComplete === null || onChangeComplete === void 0 ? void 0 : onChangeComplete(color);\n    }\n    setColorValue(color);\n    onChange === null || onChange === void 0 ? void 0 : onChange(color, color.toHexString());\n  };\n  const handleClear = () => {\n    setColorCleared(true);\n    onClear === null || onClear === void 0 ? void 0 : onClear();\n  };\n  const handleChangeComplete = color => {\n    popupAllowCloseRef.current = true;\n    let changeColor = generateColor(color);\n    // ignore alpha color\n    if (disabledAlpha && isAlphaColor) {\n      changeColor = genAlphaColor(color);\n    }\n    onChangeComplete === null || onChangeComplete === void 0 ? void 0 : onChangeComplete(changeColor);\n  };\n  const popoverProps = {\n    open: popupOpen,\n    trigger,\n    placement,\n    arrow,\n    rootClassName,\n    getPopupContainer,\n    autoAdjustOverflow,\n    destroyTooltipOnHide\n  };\n  const colorBaseProps = {\n    prefixCls,\n    color: colorValue,\n    allowClear,\n    colorCleared,\n    disabled: mergedDisabled,\n    disabledAlpha,\n    presets,\n    panelRender,\n    format: formatValue,\n    onFormatChange: setFormatValue,\n    onChangeComplete: handleChangeComplete\n  };\n  const mergedStyle = Object.assign(Object.assign({}, colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.style), style);\n  // ============================ zIndex ============================\n  return wrapSSR( /*#__PURE__*/React.createElement(Popover, Object.assign({\n    style: styles === null || styles === void 0 ? void 0 : styles.popup,\n    overlayInnerStyle: styles === null || styles === void 0 ? void 0 : styles.popupOverlayInner,\n    onOpenChange: visible => {\n      if (popupAllowCloseRef.current && !mergedDisabled) {\n        setPopupOpen(visible);\n      }\n    },\n    content: /*#__PURE__*/React.createElement(NoFormStyle, {\n      override: true,\n      status: true\n    }, /*#__PURE__*/React.createElement(ColorPickerPanel, Object.assign({}, colorBaseProps, {\n      onChange: handleChange,\n      onChangeComplete: handleChangeComplete,\n      onClear: handleClear\n    }))),\n    overlayClassName: mergePopupCls\n  }, popoverProps), children || ( /*#__PURE__*/React.createElement(ColorTrigger, Object.assign({\n    open: popupOpen,\n    className: mergeCls,\n    style: mergedStyle,\n    color: value ? generateColor(value) : colorValue,\n    prefixCls: prefixCls,\n    disabled: mergedDisabled,\n    colorCleared: colorCleared,\n    showText: showText,\n    format: formatValue\n  }, rest)))));\n};\nif (process.env.NODE_ENV !== 'production') {\n  ColorPicker.displayName = 'ColorPicker';\n}\nconst PurePanel = genPurePanel(ColorPicker, 'color-picker', /* istanbul ignore next */\nprefixCls => prefixCls, props => Object.assign(Object.assign({}, props), {\n  placement: 'bottom',\n  autoAdjustOverflow: false\n}));\nColorPicker._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default ColorPicker;"]},"metadata":{},"sourceType":"module"}