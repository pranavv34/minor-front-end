{"ast":null,"code":"'use strict';\n/**\n * Throttle decorator\n * @param {Function} fn\n * @param {Number} freq\n * @return {Function}\n */\n\nfunction throttle(fn, freq) {\n  let timestamp = 0;\n  const threshold = 1000 / freq;\n  let timer = null;\n  return function throttled(force, args) {\n    const now = Date.now();\n\n    if (force || now - timestamp > threshold) {\n      if (timer) {\n        clearTimeout(timer);\n        timer = null;\n      }\n\n      timestamp = now;\n      return fn.apply(null, args);\n    }\n\n    if (!timer) {\n      timer = setTimeout(() => {\n        timer = null;\n        timestamp = Date.now();\n        return fn.apply(null, args);\n      }, threshold - (now - timestamp));\n    }\n  };\n}\n\nexport default throttle;","map":{"version":3,"sources":["/Users/pranavvuddagiri/Desktop/minorhome/node_modules/axios/lib/helpers/throttle.js"],"names":["throttle","fn","freq","timestamp","threshold","timer","throttled","force","args","now","Date","clearTimeout","apply","setTimeout"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,QAAT,CAAkBC,EAAlB,EAAsBC,IAAtB,EAA4B;AAC1B,MAAIC,SAAS,GAAG,CAAhB;AACA,QAAMC,SAAS,GAAG,OAAOF,IAAzB;AACA,MAAIG,KAAK,GAAG,IAAZ;AACA,SAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,IAA1B,EAAgC;AACrC,UAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;;AACA,QAAIF,KAAK,IAAIE,GAAG,GAAGN,SAAN,GAAkBC,SAA/B,EAA0C;AACxC,UAAIC,KAAJ,EAAW;AACTM,QAAAA,YAAY,CAACN,KAAD,CAAZ;AACAA,QAAAA,KAAK,GAAG,IAAR;AACD;;AACDF,MAAAA,SAAS,GAAGM,GAAZ;AACA,aAAOR,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeJ,IAAf,CAAP;AACD;;AACD,QAAI,CAACH,KAAL,EAAY;AACVA,MAAAA,KAAK,GAAGQ,UAAU,CAAC,MAAM;AACvBR,QAAAA,KAAK,GAAG,IAAR;AACAF,QAAAA,SAAS,GAAGO,IAAI,CAACD,GAAL,EAAZ;AACA,eAAOR,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeJ,IAAf,CAAP;AACD,OAJiB,EAIfJ,SAAS,IAAIK,GAAG,GAAGN,SAAV,CAJM,CAAlB;AAKD;AACF,GAjBD;AAkBD;;AAED,eAAeH,QAAf","sourcesContent":["'use strict';\n\n/**\n * Throttle decorator\n * @param {Function} fn\n * @param {Number} freq\n * @return {Function}\n */\nfunction throttle(fn, freq) {\n  let timestamp = 0;\n  const threshold = 1000 / freq;\n  let timer = null;\n  return function throttled(force, args) {\n    const now = Date.now();\n    if (force || now - timestamp > threshold) {\n      if (timer) {\n        clearTimeout(timer);\n        timer = null;\n      }\n      timestamp = now;\n      return fn.apply(null, args);\n    }\n    if (!timer) {\n      timer = setTimeout(() => {\n        timer = null;\n        timestamp = Date.now();\n        return fn.apply(null, args);\n      }, threshold - (now - timestamp));\n    }\n  };\n}\n\nexport default throttle;\n"]},"metadata":{},"sourceType":"module"}